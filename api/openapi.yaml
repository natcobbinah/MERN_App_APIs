openapi: 3.0.1
info:
  title: Social Media App  API
  version: 1.0.0
  description: API endpoints to communicate with user data
  contact:
    email: fmg3ckali@gmail.com
    name: Nathaniel Cobbinah
    url: https://shy-lime-dibbler-garb.cyclic.app/
  license:
    name: MIT
    url: https://choosealicense.com/licenses/mit/
paths:
  /api/users:
    summary: Endpoint used to create or list users in the system
    description: Registers a new user or retrieves all users in the system
    get:
      summary: Retrieve all user records from the system
      description: List all current registered users in the system
      operationId: list
      responses:
        '200':
          content:
            application/json:
              examples:
                User Records retrieved successfully:
                  value: |-
                    [
                        {
                            "_id": "62f3670f0782e68d068b9463",
                            "name": "John Smith",
                            "email": "john@smith.info",
                            "created": "2022-08-10T08:06:39.754Z"
                        }
                    ]
          description: Fetches all user records from the system
        default:
          description: Default error sample response
      tags:
        - User
    post:
      summary: Creates a new user record into the system
      description: Creates a new User registered account in  the system
      operationId: create
      requestBody:
        description: A new order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          content:
            application/json:
              examples:
                User Account created successfully:
                  value: |-
                    { 
                     "name":"John Smith",
                     "email":"john@smith.info",
                    }
          description: Creates a new user account in the system
        default:
          description: Default error sample response
      tags:
        - User
  /api/users/{userId}:
    summary: >-
      Endpoint used to retrieve a single userRecord, update userRecord or delete
      userRecord if user is loggedIn successfully
    description: A verified loggedIn user can only perform operations on this urlPath
    get:
      summary: Retrieves user Information
      description: >-
        Retrieves a valid registered user in the system, who wants to view own
        records
      operationId: read
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                User Information retrieved successfully:
                  value: |-
                    { 
                     "name":"John Smith",
                     "email":"john@smith.info",
                    }
          description: Retrieved a loggedIn user information
        default:
          description: Default error sample response
      tags:
        - User
      security:
        - bearerAuth: []
    put:
      summary: Update user record
      description: >-
        Updates a verified user who is loggedIn and wants to edit his/her
        records
      operationId: update
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: A new order object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                User Record updated Successfully:
                  value: |-
                    { 
                     "name":"John Smith",
                     "email":"john@smith.info",
                     "updated": "24232423242",
                    }
          description: Updates a loggedIn user record
        default:
          description: Default error sample response
      tags:
        - User
      security:
        - bearerAuth: []
    delete:
      summary: Delete a user from the system
      description: >-
        Deletes a verified loggedIn user, who wants to delete account
        permanently from the system
      operationId: remove
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                User Record deleted successfully:
                  value: |-
                    { 
                     "name":"John Smith",
                     "email":"john@smith.info",
                    }
          description: Removes a user account from the system
        default:
          description: Default error sample response
      tags:
        - User
      security:
        - bearerAuth: []
  /api/users/photo/{userId}:
    get:
      summary: Retrieves User Profile Photo
      description: >-
        Retrieves signedIn User profile photo using user generated
        identifier(userId)
      operationId: photo
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: An image file for user profile photo
          content:
            image/*:
              schema:
                type: string
                format: binary
        default:
          description: Default error sample response
      tags:
        - User Profile Photo
  /api/users/defaultPhoto:
    get:
      summary: 'Retrieves system default Profile Photo '
      description: >-
        Retrieves system default profile photo for users if they do not have one
        uploaded on their Profile
      operationId: defaultPhoto
      responses:
        '200':
          description: An image file for user profile photo
          content:
            image/*:
              schema:
                type: string
                format: binary
        default:
          description: Default error sample response
      tags:
        - User Profile Photo
  /api/users/follow:
    put:
      summary: Follow other users
      description: Follow another user
      operationId: addFollowing
      requestBody:
        description: Follow Other Users Request object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowUser'
      responses:
        '200':
          description: Following User successful
        default:
          description: Default error sample response
      tags:
        - Follow and Unfollow other Users
      security:
        - bearerAuth: []
  /api/users/unfollow:
    put:
      summary: Unfollow other users
      description: Unfollow another user
      operationId: removeFollowing
      requestBody:
        description: Unfollow Other Users Request object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnfollowUser'
      responses:
        '200':
          description: Following User successful
        default:
          description: Default error sample response
      tags:
        - Follow and Unfollow other Users
      security:
        - bearerAuth: []
  /api/users/findPeople/{userId}:
    get:
      summary: Retrieves list of individuals not in user following List
      description: >-
        Displays a list of individuals available in the system for the user to
        follow
      operationId: findPeople
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Available users to follow  retrieved successfully:
                  value: |-
                    [
                       { 
                       "name":"John Smith",
                       },
                       { 
                       "name":"John Doe",
                       },
                    ]
          description: Retrieved list of other users to follow
        default:
          description: Default error sample response
      tags:
        - Follow and Unfollow other Users
      security:
        - bearerAuth: []
  /api/posts/feed/{userId}:
    get:
      summary: >-
        Newsfeed list aggregated from users followed by user and user posts
        themselves
      description: >-
        each user will see posts that have been shared by people they follow,
        along with posts that they themselves share, all aggregated in a
        Newsfeed list
      operationId: listNewsFeed
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                list of posts retrieved successfully:
                  value: |-
                    postedBy{ 
                       "id":"agh862fdjl2ukdad"
                       "name":"John Smith",
                       },
                    comments[
                      postedBy:{
                          "id":"hkshwsvwywjsfsf"
                          "name":"Richard Doe",
                      },
                      postedBy:{
                          "id":"kjhrddfse46343"
                          "name":"Ivan Tembliq",
                      },
                    ]
          description: Retrieved list of posts
        default:
          description: Default error sample response
      tags:
        - Posts
      security:
        - bearerAuth: []
  /api/posts/by/{userId}:
    get:
      summary: Retrieving newsfeed posts for a specific user
      description: ''
      operationId: listByUser
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                list of posts retrieved successfully:
                  value: |-
                    postedBy{ 
                       "id":"agh862fdjl2ukdad"
                       "name":"John Smith",
                       },
                    comments[
                      postedBy:{
                          "id":"hkshwsvwywjsfsf"
                          "name":"Richard Doe",
                      },
                      postedBy:{
                          "id":"kjhrddfse46343"
                          "name":"Ivan Tembliq",
                      },
                    ]
          description: Retrieved list of posts by user
        default:
          description: Default error sample response
      tags:
        - Posts
      security:
        - bearerAuth: []
  /api/posts/new/{userId}:
    post:
      summary: 'Create a post '
      description: >-
        Allows a signed-in user to post a message and optionally add an image to
        the post
      operationId: createPost
      parameters:
        - name: userId
          in: path
          description: The userId of the user.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: A new post object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                User Post saved Successfully:
                  value: |-
                    { 
                     "name":"John Smith",
                     "email":"john@smith.info",
                     "updated": "24232423242",
                    }
          description: Creates a new post record by user
        default:
          description: Default error sample response
      tags:
        - Posts
      security:
        - bearerAuth: []
  /api/posts/photo/{postId}:
    get:
      summary: Returns the photo associated with a specific post
      description: ''
      operationId: postPhoto
      parameters:
        - name: postId
          in: path
          description: The postId of the post.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Image file for post
          content:
            image/*:
              schema:
                type: string
                format: binary
        default:
          description: Default error sample response
      tags:
        - Posts
  /api/posts/{postId}:
    delete:
      summary: Delete post  created by user
      description: >-
        This endpoint checks for authorization before deleting the post by
        ensuring the authenticated user and postedBy user are the same users.
      operationId: removePost
      parameters:
        - name: postId
          in: path
          description: The postId of the post.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                Post Record deleted successfully:
                  value: |-
                    { 
                     "text":"John Smith",
                     "photo":"john@smith.info",
                     "postedBy":"ObjectId("sgswt5gsdgwe978w3d"),
                     "created":"18-04-2023",
                    }
          description: Removes a post by user  from the system
        default:
          description: Default error sample response
      tags:
        - Posts
      security:
        - bearerAuth: []
  /api/posts/like:
    put:
      summary: Allows the user to like a post
      description: ''
      operationId: likePost
      requestBody:
        description: like user post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like_Unlike_Post'
        required: true
      responses:
        '200':
          description: Liked user post successfully
        default:
          description: Default error sample response
      tags:
        - Like/Unlike Posts
      security:
        - bearerAuth: []
  /api/posts/unlike:
    put:
      summary: Allows the user to unlike a post
      description: ''
      operationId: unlikePost
      requestBody:
        description: unlike user post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like_Unlike_Post'
        required: true
      responses:
        '200':
          description: Unliked user post successfully
        default:
          description: Default error sample response
      tags:
        - Like/Unlike Posts
      security:
        - bearerAuth: []
  /api/posts/comment:
    put:
      summary: Adds a comment to a post
      description: ''
      operationId: addComment
      requestBody:
        description: Adds a comment to a  user post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment_Post'
        required: true
      responses:
        '200':
          description: Commented on post successfully
        default:
          description: Default error sample response
      tags:
        - Comment/Uncomment Posts
      security:
        - bearerAuth: []
  /api/posts/uncomment:
    put:
      summary: ' Removes the comment from the comments array in the corresponding post'
      description: ''
      operationId: removeComment
      requestBody:
        description: Removes comment on user post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnComment_Post'
        required: true
      responses:
        '200':
          description: UnComment on post successful
        default:
          description: Default error sample response
      tags:
        - Comment/Uncomment Posts
      security:
        - bearerAuth: []
  /auth/signin:
    summary: Login to userAccount
    description: A registered User can login using this endpoint
    post:
      summary: User Login entry into the system
      description: Verifies user credentials and allow entry into the system
      operationId: signin
      requestBody:
        description: A new order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                Login successful:
                  value: |-
                    { 
                     "id": "xxxxxxxxxx",
                     "name":"John Smith",
                     "email":"john@smith.info",
                    }
          description: logs in a verified user into the system
        default:
          description: Default error sample response
      tags:
        - User Authentication
  /auth/signout:
    summary: Endpoint to logout user from the system
    description: Clears userToken, thus logging out user from the system
    get:
      summary: Logout user from the system
      description: >-
        Clear validToken, and disable access to userInfo unless user is loggedIn
        again
      operationId: signout
      responses:
        '200':
          content:
            application/json:
              examples:
                User signed out successfully:
                  value: signed out
          description: Clears userToken from the system
        default:
          description: Default error sample response
      tags:
        - User Authentication
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: UserLogin
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        about:
          type: string
        photo:
          type: string
          format: binary
      xml:
        name: UserUpdate
    FollowUser:
      type: object
      properties:
        actualUserId:
          type: string
        followId:
          type: string
      xml:
        name: FollowUser
    UnfollowUser:
      type: object
      properties:
        actualUserId:
          type: string
        unfollowId:
          type: string
      xml:
        name: UnfollowUser
    UserPost:
      type: object
      properties:
        text:
          type: string
        photo:
          type: string
          format: binary
      xml:
        name: UserPost
    Like_Unlike_Post:
      type: object
      properties:
        postId:
          type: string
        userId:
          type: string
      xml:
        name: Like_Unlike_Post
    Comment_Post:
      type: object
      properties:
        postId:
          type: string
        userId:
          type: string
        comment:
          $ref: '#/components/schemas/CommentText'
      xml:
        name: Comment_Post
    CommentText:
      type: object
      properties:
        text:
          type: string
      xml:
        name: CommentText
    UnComment_Post:
      type: object
      properties:
        postId:
          type: string
        userId:
          type: string
        comment:
          $ref: '#/components/schemas/CommentId'
      xml:
        name: UnComment_Post
    CommentId:
      type: object
      properties:
        _id:
          type: string
      xml:
        name: CommentId
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
