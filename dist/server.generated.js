(()=>{"use strict";var e={304:(e,t,r)=>{r.r(t),r.d(t,{LessonSchema:()=>n});const o=r(185),{Schema:s}=o,n=new s({title:String,content:String,resource_url:String})},986:e=>{e.exports=require("body-parser")},455:e=>{e.exports=require("compression")},710:e=>{e.exports=require("cookie-parser")},582:e=>{e.exports=require("cors")},142:e=>{e.exports=require("dotenv")},860:e=>{e.exports=require("express")},779:e=>{e.exports=require("express-jwt")},616:e=>{e.exports=require("formidable")},806:e=>{e.exports=require("helmet")},344:e=>{e.exports=require("jsonwebtoken")},185:e=>{e.exports=require("mongoose")},948:e=>{e.exports=require("swagger-ui-express")},66:e=>{e.exports=require("yaml")},147:e=>{e.exports=require("fs")},5:e=>{e.exports=require("node:crypto")},17:e=>{e.exports=require("path")}},t={};function r(o){var s=t[o];if(void 0!==s)return s.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{r.r(o);var e=r(17),t=r.n(e);const s=process.cwd();r(142).config({path:t().join(s,"./server/env/.env")});const n={port:process.env.port,mongoUri:process.env.MONGODB_URI,jwtSecret:process.env.JWT_SECRET},a=r(185),{Schema:i}=a;let u;try{u=r(5)}catch(e){console.error("crypto support is disabled!")}const d=new i({name:{type:String,trim:!0,required:"Name is required"},email:{type:String,trim:!0,unique:"Email already exists",match:[/.+\@.+\..+/,"Please fill a valid email address"],required:"Email is required"},created:{type:Date,default:Date.now},updated:Date,hashed_password:{type:String,required:"Password is required"},salt:String,about:{type:String,trim:!0},photo:{data:Buffer,contentType:String},following:[{type:a.ObjectId,ref:"Users"}],followers:[{type:a.ObjectId,ref:"Users"}],educator:{type:Boolean,default:!1}});d.virtual("password").set((function(e){this._password=e,this.salt=this.makeSalt(),this.hashed_password=this.encryptPassword(e)})).get((function(){return this._password})),d.methods={authenticate:function(e){return this.encryptPassword(e)===this.hashed_password},encryptPassword:function(e){if(!e)return"not password";try{return u.createHmac("sha1",this.salt).update(e).digest("hex")}catch(e){return"Encrypting password error"}},makeSalt:function(){return Math.round((new Date).valueOf()*Math.random())+""}},d.path("hashed_password").validate((function(e){this._password&&this._password.length<6&&this.invalidate("password","Password must be at least 6 characters."),this.isNew&&!this._password&&this.invalidate("password","Password is required for account")}),null);const l=a.model("Users",d),p=e=>{let t="";if(!e.code){for(let r in e.errors)e.errors[r].message&&(t=e.errors[r].message);return t}switch(e.code){case 11e3:case 11001:t=(e=>{let t;try{let r=e.message.substring(e.message.lastIndexOf(".$")+2,e.message.lastIndexOf(_1));t=r.charAt(0).toUpperCase()+r.slice(1)+" already exists"}catch(e){t="Unique field already exists"}return t})(e);break;default:t="Something went wrong"}},{IncomingForm:c}=r(616),y=r(147),m=process.cwd(),h=r(17).join(m,"/assets/images/defaultProfile.png"),g=async(e,t,r,o)=>{try{let s=await l.findById(o).populate("following","_id name").populate("followers","_id name").exec();if(!s)return t.status(400).json({error:"User not found"});e.profile=s,r()}catch(e){return t.status(400).json({error:"Could not retrieve user - you don't need this error"})}},f=(e,t)=>t.sendFile(h),w=r(344);var{expressjwt:j}=r(779);const I={signin:async(e,t)=>{try{let r=await l.findOne({email:e.body.email});if(!r)return t.status(401).json({error:"User not found"});if(!r.authenticate(e.body.password))return t.status(401).json({error:"Email and password don't match."});const o=w.sign({_id:r._id},n.jwtSecret);return t.cookie("t",o,{expire:new Date+9999}),t.json({token:o,user:{_id:r._id,name:r.name,email:r.email,educator:r.educator}})}catch(e){return t.status(401).json({error:"Could not sign in"})}},signout:(e,t)=>(t.clearCookie("t"),t.status(200).json({message:"Signed out"})),requireSignIn:j({secret:n.jwtSecret,userProperty:"auth",algorithms:["HS256"]}),hasAuthorization:(e,t,r)=>{if(!(e.profile&&e.auth&&e.profile._id&&e.auth._id))return t.status(403).json({error:"User is not authorized"});r()}},S=r(860).Router();S.route("/api/users").get((async(e,t)=>{try{let e=await l.find().select("name email updated created");t.json(e)}catch(e){return t.status(400).json({error:p(e)})}})).post((async(e,t)=>{const r=new l(e.body);try{return await r.save(),t.status(200).json({message:"Successfully signed up!"})}catch(e){return t.status(400).json({error:p(e)})}})),S.route("/api/users/defaultPhoto").get(f),S.route("/api/users/follow").put(I.requireSignIn,(async(e,t,r)=>{try{await l.findByIdAndUpdate(e.body.actualUserId,{$push:{following:e.body.followId}}),r()}catch(e){return t.status(400).json({error:p(e)})}}),(async(e,t)=>{try{let r=await l.findByIdAndUpdate(e.body.followId,{$push:{followers:e.body.actualUserId}},{new:!0}).populate("following","_id name").populate("followers","_id name").exec();r.hashed_password=void 0,r.salt=void 0,t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),S.route("/api/users/unfollow").put(I.requireSignIn,(async(e,t,r)=>{try{await l.findByIdAndUpdate(e.body.actualUserId,{$pull:{following:e.body.unfollowId}}),r()}catch(e){return t.status(400).json({error:p(e)})}}),(async(e,t)=>{try{let r=await l.findByIdAndUpdate(e.body.unfollowId,{$pull:{followers:e.body.actualUserId}},{new:!0}).populate("following","_id name").populate("followers","_id name").exec();r.hashed_password=void 0,r.salt=void 0,t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),S.route("/api/users/findPeople/:userId").get(I.requireSignIn,(async(e,t)=>{let r=e.profile.following;r.push(e.profile._id);try{let e=await l.find({_id:{$nin:r}}).select("name");t.json(e)}catch(e){return t.status(400).json({error:p(e)})}})),S.route("/api/users/:userId").get(I.requireSignIn,((e,t)=>(e.profile.hashed_password=void 0,e.profile.salt=void 0,t.json(e.profile)))).put(I.requireSignIn,I.hasAuthorization,(async(e,t)=>{new c({keepExtensions:!0}).parse(e,(async(r,o,s)=>{if(r)return t.status(400).json({error:"Photo could not be uploaded"});let n=e.profile;n=Object.assign(n,e.body),n.updated=Date.now(),n.educator=o.educator,s.photo&&(n.photo.data=y.readFileSync(s.photo.filepath),n.photo.contentType=s.photo.mimetype);try{await n.save(),n.hashed_password=void 0,n.salt=void 0,t.json(n)}catch(r){return t.status(400).json({error:p(r)})}}))})).delete(I.requireSignIn,I.hasAuthorization,(async(e,t)=>{try{let r=e.profile,o=await r.deleteOne();o.hashed_password=void 0,o.salt=void 0,t.json(o)}catch(e){return t.status(400).json({error:p(e)})}})),S.route("/api/users/photo/:userId").get(((e,t,r)=>{if(e.profile.photo.data)return t.set("Content-Type",e.profile.photo.contentType),t.send(e.profile.photo.data);r()}),f),S.param("userId",g);const _=S,b=r(860).Router();b.route("/auth/signin").post(I.signin),b.route("/auth/signout").get(I.signout);const x=b,q=r(185),{Schema:v}=q,B=new v({text:{type:String,required:"Text is required"},photo:{data:Buffer,contentType:String},postedBy:{type:q.ObjectId,ref:"Users"},created:{type:Date,default:Date.now},likes:[{type:q.ObjectId,ref:"Users"}],comments:[{text:String,created:{type:Date,default:Date.now},commentedBy:{type:q.ObjectId,ref:"Users"}}]}),U=q.model("Posts",B),{IncomingForm:O}=r(616),D=r(147),P=r(860).Router();P.route("/api/posts/feed/:userId").get(I.requireSignIn,(async(e,t)=>{e.profile.following.push(e.profile._id);try{let r=await U.find({postedBy:{$in:e.profile.following}}).populate("comments.commentedBy","_id name").populate("postedBy","_id name").sort("-created").exec();t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/by/:userId").get(I.requireSignIn,(async(e,t)=>{try{let r=await U.find({postedBy:e.profile._id}).populate("comments.commentedBy","_id name").populate("postedBy","_id name").sort("-created").exec();t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/new/:userId").post(I.requireSignIn,((e,t)=>{new O({keepExtensions:!0}).parse(e,(async(r,o,s)=>{if(r)return t.status(400).json({error:"Image could not be uploaded"});let n=new U(o);n.postedBy=e.profile,s.photo&&(n.photo.data=D.readFileSync(s.photo.filepath),n.photo.contentType=s.photo.mimetype);try{return await n.save(),t.json(n)}catch(r){return t.status(400).json({error:p(r)})}}))})),P.route("/api/posts/photo/:postId").get(((e,t,r)=>(t.set("Content-Type",e.post.photo.contentType),t.send(e.post.photo.data)))),P.route("/api/posts/:postId").delete(I.requireSignIn,((e,t,r)=>{if(!e.post||!e.auth||e.post.postedBy._id!=e.auth._id)return t.status(403).json({error:"User is not authorized"});r()}),(async(e,t)=>{try{let r=e.post,o=await r.deleteOne();o.photo=void 0,o.likes=void 0,o.comments=void 0,t.json(o)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/like").put(I.requireSignIn,(async(e,t)=>{try{let r=await U.findByIdAndUpdate(e.body.postId,{$push:{likes:e.body.userId}},{new:!0});t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/unlike").put(I.requireSignIn,(async(e,t)=>{try{let r=await U.findByIdAndUpdate(e.body.postId,{$pull:{likes:e.body.userId}});t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/comment").put(I.requireSignIn,(async(e,t)=>{let r=e.body.comment;r.commentedBy=e.body.userId;try{let o=await U.findByIdAndUpdate(e.body.postId,{$push:{comments:r}},{new:!0}).populate("comments.commentedBy","_id name").populate("postedBy","_id name").exec();t.json(o)}catch(e){return t.status(400).json({error:p(e)})}})),P.route("/api/posts/uncomment").put(I.requireSignIn,(async(e,t)=>{let r=e.body.comment;try{let o=await U.findByIdAndUpdate(e.body.postId,{$pull:{comments:{_id:r._id}}},{new:!0}).populate("comments.commentedBy","_id name").populate("postedBy","_id name").exec();t.json(o)}catch(e){return t.status(400).json({error:p(e)})}})),P.param("userId",g),P.param("postId",(async(e,t,r,o)=>{try{let s=await U.findById(o).populate("postedBy","_id name").exec();if(!s)return t.status(400).json({error:"Post not found"});e.post=s,r()}catch(e){return t.status(400).json({error:"Could not retrieve user post"})}}));const k=P,C=r(185),{Schema:T}=C,{LessonSchema:A}=r(304),E=new T({name:{type:String,trim:!0,required:"Name is required"},description:{type:String,trim:!0},image:{data:Buffer,contentType:String},category:{type:String,required:"Category is required"},published:{type:Boolean,default:!1},instructor:{type:C.ObjectId,ref:"Users"},updated:Date,created:{type:Date,default:Date.now},lessons:[A]}),$=C.model("Courses",E),{IncomingForm:F}=r(616),z=r(147),M=process.cwd(),R=r(17).join(M,"/assets/images/defaultCourseImage.jpg"),N=async(e,t,r,o)=>{try{let t=await $.findById(o).populate("instructor","_id name");e.course=t,r()}catch(e){return console.log(e),t.status(400).json({error:"Could not retrieve course"})}},H=(e,t,r)=>{if(!e.course||!e.auth||e.course.instructor._id!=e.auth._id)return t.status(403).json({error:"User is not authorized"});r()},L=r(860).Router();L.route("/api/courses/published").get((async(e,t)=>{try{let e=await $.find({published:!0}).populate("instructor","_id name").exec();t.json(e)}catch(e){return console.log(e),t.status(400).json({error:p(e)})}})),L.route("/api/courses/by/:userId").post(I.requireSignIn,I.hasAuthorization,((e,t,r)=>{if(!e.profile||!e.profile.educator)return t.status(403).json({error:"User is not an educator"});r()}),((e,t)=>{new F({keepExtensions:!0}).parse(e,(async(r,o,s)=>{if(r)return t.status(400).json({error:"Image could not be uploaded"});let n=new $(o);s.image&&(n.image.data=z.readFileSync(s.image.filepath),n.image.contentType=s.image.mimetype),n.instructor=e.profile._id;try{let e=await n.save();t.json(e)}catch(r){return console.log(r),t.status(400).json({error:p(r)})}}))})),L.route("/api/courses/by/:userId").get(I.requireSignIn,I.hasAuthorization,(async(e,t)=>{try{let r=await $.find({instructor:e.profile._id}).populate("instructor","_id name").exec();console.log(r),t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),L.route("/api/courses/:courseId").get(((e,t)=>(e.course.image=void 0,console.log(e.course),t.json(e.course)))),L.route("/api/courses/:courseId/lesson/new").put(I.requireSignIn,H,(async(e,t)=>{try{console.log(e.body);let r=await $.findByIdAndUpdate(e.course._id,{$push:{lessons:e.body},updated:Date.now()},{new:!0}).populate("instructor","_id name").exec();t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),L.route("/api/courses/:courseId").put(I.requireSignIn,H,((e,t)=>{new F({keepExtensions:!0}).parse(e,(async(r,o,s)=>{if(r)return t.status(400).json({error:"Photo could not be uploaded"});let n=e.course;n=Object.assign(n,o),o.lessons&&(n.lessons=JSON.parse(o.lessons)),n.updated=Date.now(),s.image&&(n.image.data=z.readFileSync(s.image.filepath),n.image.contentType=s.image.mimetype);try{await n.save(),t.json(n)}catch(r){return t.status(400).json({error:p(r)})}}))})),L.route("/api/courses/:courseId").delete(I.requireSignIn,H,(async(e,t)=>{try{let r=e.course,o=await r.deleteOne();t.json(o)}catch(e){return t.status(400).json({error:p(e)})}})),L.route("/api/courses/photo/:courseId").get(((e,t,r)=>{if(e.course.image.data)return t.set("Content-Type",e.course.image.contentType),t.send(e.course.image.data);r()}),((e,t)=>t.sendFile(R))),L.param("userId",g),L.param("courseId",N);const J=L,W=r(185),{Schema:G}=W,K=new G({course:{type:W.ObjectId,ref:"Courses"},student:{type:W.ObjectId,ref:"Users"},lessonStatus:[{lesson:{type:W.ObjectId,ref:"Lessons"},complete:Boolean}],enrolled:{type:Date,default:Date.now},updated:Date,completed:Date}),Q=W.model("Enrollments",K),{IncomingForm:V}=r(616),X=(r(147),process.cwd(),r(17),async(e,t,r)=>{try{let o=await Q.find({course:e.course._id,student:e.auth._id});0==o.length?r():t.json(o[0])}catch(e){return t.status(400).json({error:p(e)})}}),Y=(e,t,r)=>{if(!e.auth||e.auth._id!=e.enrollment.student._id)return t.status(403).json({error:"User is not enrolled"});r()},Z=r(860).Router();Z.route("/api/enrollment/enrolled").get(I.requireSignIn,(async(e,t)=>{try{let r=await Q.find({student:e.auth._id}).sort({completed:1}).populate("course","_id name category").exec();t.json(r)}catch(e){return console.log(e),t.status(400).json({error:p(e)})}})),Z.route("/api/enrollment/stats/:courseId").get((async(e,t)=>{try{let r={};r.totalEnrolled=await Q.find({course:e.course._id}).countDocuments(),r.totalCompleted=await Q.find({course:e.course._id}).exists("completed",!0).countDocuments(),t.json(r)}catch(e){return t.status(400).json({error:p(e)})}})),Z.route("/api/enrollment/new/:courseId").get(I.requireSignIn,X,(async(e,t)=>{let r={course:e.course,student:e.auth};r.lessonStatus=e.course.lessons.map((e=>({lesson:e,completed:!1})));const o=new Q(r);try{let e=await o.save();return t.status(200).json(e)}catch(e){return t.status(400).json({error:p(e)})}})),Z.route("/api/enrollment/:enrollmentId").get(I.requireSignIn,Y,((e,t)=>t.json(e.enrollment))),Z.route("/api/enrollment/complete/:enrollmentId").put(I.requireSignIn,Y,(async(e,t)=>{let r={};if(r["lessonStatus.$.complete"]=e.body.complete,r.updated=Date.now(),e.body.courseCompleted){r.completed=e.body.courseCompleted;try{let o=await Q.updateOne({"lessonStatus._id":e.body.lessonStatusId},{$set:r});t.json(o)}catch(e){return t.status(400).json({error:p(e)})}}})),Z.param("courseId",N),Z.param("enrollmentId",(async(e,t,r,o)=>{try{let s=await Q.findById(o).populate({path:"course",populate:{path:"instructor"}}).populate("student","_id name").exec();if(!s)return t.status(400).json({error:"Enrollment not found"});e.enrollment=s,r()}catch(e){return t.status(400).json({error:"Could not retrieve enrollment"})}}));const ee=Z,te=r(860),re=r(986),oe=r(710),se=r(455),ne=r(582),ae=r(806),ie=r(17),ue=process.cwd(),de=r(948),le=r(147),pe=r(66),ce=te();ce.use(re.json()),ce.use(re.urlencoded({extended:!0})),ce.use(oe()),ce.use(se()),ce.use(ae()),ce.use(ne()),ce.use("/",_),ce.use("/",x),ce.use("/",k),ce.use("/",J),ce.use("/",ee);const ye=le.readFileSync(ie.join(ue,"/api/openapi.yaml"),"utf8"),me=pe.parse(ye);ce.use("/docs",de.serve,de.setup(me,{explorer:!0})),ce.use(((e,t,r,o)=>{"UnauthorizedError"===e.name?r.status(401).json({error:e.name+" : "+e.message}):e&&(r.status(400).json({error:e.name+" : "+e.message}),console.log(e))}));const he=ce,ge=r(185);ge.Promise=global.Promise;let fe={useNewUrlParser:!0,useUnifiedTopology:!0};(async()=>{try{const e=await ge.connect(n.mongoUri,fe);console.log(`MongoDB Connected: ${e.connection.host}`)}catch(e){console.log(e),process.exit(1)}})().then((()=>{he.listen(n.port,(e=>{e&&console.log(e),console.log("Server started on port %s.",n.port),console.log("Swagger-ui is available on http://localhost:%d/docs",n.port)}))})),he.get("/",((e,t)=>{t.status(200).send('<!doctype html>\n      <html lang="en">\n          <head>\n             <meta charset="utf-8">\n             <title>MERN Skeleton</title>\n          </head>\n          <body>\n            <div id="root">Hello World</div>\n          </body>\n      </html>')}))})(),module.exports=o})();